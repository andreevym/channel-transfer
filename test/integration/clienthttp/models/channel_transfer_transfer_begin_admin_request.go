// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChannelTransferTransferBeginAdminRequest TransferBeginAdminRequest запрос о переводе токенов от Администратора платформы
//
// swagger:model channel_transferTransferBeginAdminRequest
type ChannelTransferTransferBeginAdminRequest struct {

	// Чьи токены переводят
	Address string `json:"address,omitempty"`

	// Сколько переводят токенов
	Amount string `json:"amount,omitempty"`

	// Канал, в который переводят токены
	ChannelTo string `json:"channelTo,omitempty"`

	// Информация о транзакции
	Generals *ChannelTransferGeneralParams `json:"generals,omitempty"`

	// ID трансфера (должно быть уникально)
	IDTransfer string `json:"idTransfer,omitempty"`

	// options
	Options []*ProtobufOption `json:"options"`

	// Токены которые хотят перевести
	Token string `json:"token,omitempty"`
}

// Validate validates this channel transfer transfer begin admin request
func (m *ChannelTransferTransferBeginAdminRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenerals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelTransferTransferBeginAdminRequest) validateGenerals(formats strfmt.Registry) error {

	if swag.IsZero(m.Generals) { // not required
		return nil
	}

	if m.Generals != nil {
		if err := m.Generals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generals")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelTransferTransferBeginAdminRequest) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelTransferTransferBeginAdminRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelTransferTransferBeginAdminRequest) UnmarshalBinary(b []byte) error {
	var res ChannelTransferTransferBeginAdminRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
